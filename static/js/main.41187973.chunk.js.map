{"version":3,"sources":["rain/constants/item.ts","MintButton.tsx","rain/constants/matches.ts","Home.tsx","rain/constants/namespace.ts","rain/constants/player.ts","rain/utils/ata.ts","rain/constants/programIds.ts","rain/state/matches.ts","rain/utils/connection.ts","rain/contract/matches.ts","rain/utils/pda.ts","App.tsx","reportWebVitals.ts","index.tsx","connection.tsx"],"names":["PREFIX","MARKER","CTAButton","styled","Button","MintButton","onMint","disabled","onClick","console","log","variant","getOracle","seed","payer","PublicKey","findProgramAddress","Buffer","from","toBuffer","MATCHES_ID","anchor","fanout","WalletContainer","process","toString","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","MintButtonContainer","SolExplorerLink","a","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","LinearProgress","Home","props","useState","Date","getTime","endts","setEndts","balance","setBalance","thepots","setthepots","index","setIndex","setIsMinting","isActive","solanaExplorerLink","price","priceLabel","whitelistPrice","whitelistEnabled","whitelistTokenBalance","setIsEnded","toplay","setToplay","connection","useConnection","wallet","useWallet","open","message","severity","undefined","alertState","setAlertState","anchorWallet","rpcHost","useMemo","publicKey","signAllTransactions","signTransaction","connected","provider","preflightCommitment","idl","program","anchorProgram","MatchesProgram","id","fetch","json","config","setup","tokensToJoin","amount","escrowBump","tokenEntryValidation","tokenEntryValidationProof","tokenMint","mint","sourceTokenAccount","tokenTransferAuthority","validationProgram","winOracle","oracleState","authority","sourceType","joinMatch","someDecs2","setInterval","text","thepotsTemp","length","getAssociatedAccountBalance","connection2","mintPublicKey","tokenAmount","uiAmount","mintKey","useEffect","ts","temp","token","parseInt","shares","setShares","Connection","e","preventDefault","target","value","fanoutSdk","FanoutClient","ixes","Object","keys","der","distributeTokenMemberInstructions","distributeForMint","fanoutMint","membershipMint","member","ix","instructions","bla","push","sendInstructions","parseFloat","stakeTokenMemberInstructions","ixs","unstakeTokenMember","toLocaleString","elevation","label","src","alt","date","onMount","completed","onComplete","renderer","days","hours","minutes","type","onChange","err","placeholder","href","style","color","fontSize","backgroundColor","onInput","autoHideDuration","onClose","createAssociatedTokenAccountInstruction","associatedTokenAddress","walletAddress","splTokenMintAddress","pubkey","isSigner","isWritable","web3","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","NAMESPACE_ID","ITEM_ID","PLAYER_ID","TOKEN_METADATA_PROGRAM_ID","MatchState","TokenTransferType","TokenType","clusterApiUrl","transformTokenValidations","args","map","r","newRFilter","filter","forEach","k","y","validation","key","code","BN","MatchWrapper","object","this","MatchesInstruction","getMatch","match","methods","createMatch","accounts","matchInstance","systemProgram","rent","instruction","signers","additionalArgs","tfer","tokenDelta","getMatchTokenAccountEscrow","tokenAccountEscrow","destinationTokenAccount","to","getAccountInfo","info","owner","equals","destinationTokenOwner","getAtaForMint","exists","unshift","disburseTokensByOracle","originalSender","tokenProgram","_args","drainMatch","receiver","oracle","drainOracle","updateMatch","leaveMatch","transferAuthority","Keypair","generate","Token","createApproveInstruction","toNumber","Any","Item","getItemPDA","getPlayerPDA","sourceItemOrPlayerPda","createRevokeInstruction","updateMatchFromOracle","clock","SYSVAR_CLOCK_PUBKEY","tokenTransfers","t","createOrUpdateOracle","matchPda","account","oracleAcct","coder","decode","oracleInstance","sendTransactionWithRetry","MATCHES_PREFIX","tokenOwner","ITEM_PREFIX","PLAYER_PREFIX","require","network","theme","createTheme","palette","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","txTimeout","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SequenceType","commitment","includesFeePayer","block","beforeSend","WalletNotConnectedError","transaction","Transaction","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","sendSignedTransaction","signedTransaction","txid","slot","getUnixTs","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","error","simulateResult","simulateTransaction","logs","i","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","encoding","_rpcRequest","res","result","queryStatus","status","confirmations","subId","Promise","resolve","reject","setTimeout","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms"],"mappings":"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","file":"static/js/main.41187973.chunk.js","sourcesContent":["export const PREFIX: string = \"item\";\nexport const MARKER: string = \"marker\";\n","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport { BN } from '@project-serum/anchor'\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint\n                           }: {\n    onMint: () => Promise<void>;\n}) => {\n    return (\n        <CTAButton\n            disabled={false}\n            \n            onClick={async () => {\n                    console.log('Minting...');\n                    await onMint();\n            }}\n            variant=\"contained\"\n        >\n                        as tribute for your team; become winner @ some tokenz\n                    \n        </CTAButton>\n    );\n};\n","export const PREFIX = \"matches\";\n","import {useEffect, useMemo, useState} from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { MatchesProgram } from \"./rain/contract/matches\";\nimport {getAtaForMint, toDate} from './utils';\nimport { FanoutClient } from '@glasseaters/hydra-sdk'\nimport fetch from 'node-fetch';\nimport { getAssociatedAccountBalance } from \"@strata-foundation/spl-utils\";\n\nimport {\n    PublicKey,\n    Transaction,\n    LAMPORTS_PER_SOL,\n    Connection\n} from \"@solana/web3.js\";\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\nimport {useConnection, useWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip, Input, Button, Link} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {AlertState} from './utils';\nimport {CTAButton, MintButton} from './MintButton';\n\nimport { TokenType } from \"raindrops-cli/build/state/matches\";\n\nexport const getOracle = async (\n    seed: PublicKey,\n    payer: PublicKey\n  ): Promise<[PublicKey, number]> => {\n    return await PublicKey.findProgramAddress(\n      [Buffer.from(\"matches\"), payer.toBuffer(), seed.toBuffer()],\n      MATCHES_ID\n    );\n  };\n  \nexport const MATCHES_ID = new anchor.web3.PublicKey(\n    \"mtchsiT6WoLQ62fwCoiHMCfXJzogtfru4ovY8tXKrjJ\"\n  );\n  const fanout = new PublicKey(\"H3QZjfiZLQdREFQxSjBxezSfiUvNFEPmnoWVi4R6dLnd\")\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n\n  h1 {\n    margin: 0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\n  background-color: var(--main-text-color) !important;\n\n  > div.MuiLinearProgress-barColorPrimary {\n    background-color: var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\nexport interface HomeProps {\n    candyMachineId?: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n    network: WalletAdapterNetwork;\n}\nlet first = true;\nconst Home = (props: HomeProps) => {\n  const [endts, setEndts] = useState<number>(new Date().getTime() - 1);\n  const [balance, setBalance] = useState(0)\n  const [thepots, setthepots] = useState<string>()\n \n  const [index, setIndex] = useState<number>(0);\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n    const [toplay, setToplay] = useState(\"\");\n    \nconst { connection } = useConnection()\n\nconst wallet = useWallet();\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const [needTxnSplit, setNeedTxnSplit] = useState(true);\n    const rpcUrl = props.rpcHost;\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const anchorWallet = useMemo(() => {\n        if (\n            !wallet ||\n            !wallet.publicKey ||\n            !wallet.signAllTransactions ||\n            !wallet.signTransaction\n        ) {\n            return;\n        }\n\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction,\n        } as anchor.Wallet;\n    }, [wallet]);\n\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes + 1) + \" minutes left to blarg.\"\n        if (days + hours + minutes <= 0){\n          label = \"\"\n        }\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    const onMint = async (\n        beforeTransactions: Transaction[] = [],\n        afterTransactions: Transaction[] = [],\n    ) => {\n            if (wallet.connected && wallet.publicKey) {\n                setIsMinting(true);\n                // @ts-ignore\n                const provider = new anchor.Provider(connection, anchorWallet, {\n                    preflightCommitment: 'processed',\n                  });\n\n  const idl = {\"version\":\"0.1.0\",\"name\":\"matches\",\"instructions\":[{\"name\":\"createOrUpdateOracle\",\"accounts\":[{\"name\":\"oracle\",\"isMut\":true,\"isSigner\":false},{\"name\":\"payer\",\"isMut\":true,\"isSigner\":true},{\"name\":\"systemProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"rent\",\"isMut\":false,\"isSigner\":false}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"CreateOrUpdateOracleArgs\"}}]},{\"name\":\"createMatch\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"payer\",\"isMut\":true,\"isSigner\":true},{\"name\":\"systemProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"rent\",\"isMut\":false,\"isSigner\":false}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"CreateMatchArgs\"}}]},{\"name\":\"updateMatch\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"winOracle\",\"isMut\":false,\"isSigner\":false},{\"name\":\"authority\",\"isMut\":false,\"isSigner\":true}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"UpdateMatchArgs\"}}]},{\"name\":\"updateMatchFromOracle\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"winOracle\",\"isMut\":false,\"isSigner\":false},{\"name\":\"clock\",\"isMut\":false,\"isSigner\":false}],\"args\":[]},{\"name\":\"drainOracle\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":false,\"isSigner\":false},{\"name\":\"oracle\",\"isMut\":true,\"isSigner\":false},{\"name\":\"authority\",\"isMut\":false,\"isSigner\":true},{\"name\":\"receiver\",\"isMut\":true,\"isSigner\":false}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"DrainOracleArgs\"}}]},{\"name\":\"drainMatch\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"authority\",\"isMut\":false,\"isSigner\":true},{\"name\":\"receiver\",\"isMut\":false,\"isSigner\":false}],\"args\":[]},{\"name\":\"leaveMatch\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"receiver\",\"isMut\":false,\"isSigner\":false},{\"name\":\"tokenAccountEscrow\",\"isMut\":true,\"isSigner\":false},{\"name\":\"tokenMint\",\"isMut\":true,\"isSigner\":false},{\"name\":\"destinationTokenAccount\",\"isMut\":true,\"isSigner\":false},{\"name\":\"tokenProgram\",\"isMut\":false,\"isSigner\":false}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"LeaveMatchArgs\"}}]},{\"name\":\"disburseTokensByOracle\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"tokenAccountEscrow\",\"isMut\":true,\"isSigner\":false},{\"name\":\"tokenMint\",\"isMut\":true,\"isSigner\":false},{\"name\":\"destinationTokenAccount\",\"isMut\":true,\"isSigner\":false},{\"name\":\"winOracle\",\"isMut\":false,\"isSigner\":false},{\"name\":\"originalSender\",\"isMut\":true,\"isSigner\":false},{\"name\":\"systemProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"tokenProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"rent\",\"isMut\":false,\"isSigner\":false}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"DisburseTokensByOracleArgs\"}}]},{\"name\":\"joinMatch\",\"accounts\":[{\"name\":\"matchInstance\",\"isMut\":true,\"isSigner\":false},{\"name\":\"tokenTransferAuthority\",\"isMut\":false,\"isSigner\":true},{\"name\":\"tokenAccountEscrow\",\"isMut\":true,\"isSigner\":false},{\"name\":\"tokenMint\",\"isMut\":true,\"isSigner\":false},{\"name\":\"sourceTokenAccount\",\"isMut\":true,\"isSigner\":false},{\"name\":\"sourceItemOrPlayerPda\",\"isMut\":false,\"isSigner\":false},{\"name\":\"payer\",\"isMut\":true,\"isSigner\":true},{\"name\":\"systemProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"validationProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"tokenProgram\",\"isMut\":false,\"isSigner\":false},{\"name\":\"rent\",\"isMut\":false,\"isSigner\":false}],\"args\":[{\"name\":\"args\",\"type\":{\"defined\":\"JoinMatchArgs\"}}]}],\"accounts\":[{\"name\":\"Match\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"namespaces\",\"type\":{\"option\":{\"vec\":{\"defined\":\"NamespaceAndIndex\"}}}},{\"name\":\"winOracle\",\"type\":\"publicKey\"},{\"name\":\"winOracleCooldown\",\"type\":\"u64\"},{\"name\":\"lastOracleCheck\",\"type\":\"u64\"},{\"name\":\"authority\",\"type\":\"publicKey\"},{\"name\":\"state\",\"type\":{\"defined\":\"MatchState\"}},{\"name\":\"leaveAllowed\",\"type\":\"bool\"},{\"name\":\"minimumAllowedEntryTime\",\"type\":{\"option\":\"u64\"}},{\"name\":\"bump\",\"type\":\"u8\"},{\"name\":\"currentTokenTransferIndex\",\"type\":\"u64\"},{\"name\":\"tokenTypesAdded\",\"type\":\"u64\"},{\"name\":\"tokenTypesRemoved\",\"type\":\"u64\"},{\"name\":\"tokenEntryValidation\",\"type\":{\"option\":{\"vec\":{\"defined\":\"TokenValidation\"}}}},{\"name\":\"tokenEntryValidationRoot\",\"type\":{\"option\":{\"defined\":\"Root\"}}},{\"name\":\"joinAllowedDuringStart\",\"type\":\"bool\"}]}},{\"name\":\"PlayerWinCallbackBitmap\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"matchKey\",\"type\":\"publicKey\"}]}},{\"name\":\"WinOracle\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"finalized\",\"type\":\"bool\"},{\"name\":\"tokenTransferRoot\",\"type\":{\"option\":{\"defined\":\"Root\"}}},{\"name\":\"tokenTransfers\",\"type\":{\"option\":{\"vec\":{\"defined\":\"TokenDelta\"}}}}]}}],\"types\":[{\"name\":\"CreateOrUpdateOracleArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"tokenTransferRoot\",\"type\":{\"option\":{\"defined\":\"Root\"}}},{\"name\":\"tokenTransfers\",\"type\":{\"option\":{\"vec\":{\"defined\":\"TokenDelta\"}}}},{\"name\":\"seed\",\"type\":\"publicKey\"},{\"name\":\"space\",\"type\":\"u64\"},{\"name\":\"finalized\",\"type\":\"bool\"}]}},{\"name\":\"DrainOracleArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"seed\",\"type\":\"publicKey\"}]}},{\"name\":\"CreateMatchArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"matchState\",\"type\":{\"defined\":\"MatchState\"}},{\"name\":\"tokenEntryValidationRoot\",\"type\":{\"option\":{\"defined\":\"Root\"}}},{\"name\":\"tokenEntryValidation\",\"type\":{\"option\":{\"vec\":{\"defined\":\"TokenValidation\"}}}},{\"name\":\"winOracle\",\"type\":\"publicKey\"},{\"name\":\"winOracleCooldown\",\"type\":\"u64\"},{\"name\":\"authority\",\"type\":\"publicKey\"},{\"name\":\"space\",\"type\":\"u64\"},{\"name\":\"leaveAllowed\",\"type\":\"bool\"},{\"name\":\"joinAllowedDuringStart\",\"type\":\"bool\"},{\"name\":\"minimumAllowedEntryTime\",\"type\":{\"option\":\"u64\"}}]}},{\"name\":\"UpdateMatchArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"matchState\",\"type\":{\"defined\":\"MatchState\"}},{\"name\":\"tokenEntryValidationRoot\",\"type\":{\"option\":{\"defined\":\"Root\"}}},{\"name\":\"tokenEntryValidation\",\"type\":{\"option\":{\"vec\":{\"defined\":\"TokenValidation\"}}}},{\"name\":\"winOracleCooldown\",\"type\":\"u64\"},{\"name\":\"authority\",\"type\":\"publicKey\"},{\"name\":\"leaveAllowed\",\"type\":\"bool\"},{\"name\":\"joinAllowedDuringStart\",\"type\":\"bool\"},{\"name\":\"minimumAllowedEntryTime\",\"type\":{\"option\":\"u64\"}}]}},{\"name\":\"JoinMatchArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"amount\",\"type\":\"u64\"},{\"name\":\"tokenEntryValidationProof\",\"type\":{\"option\":{\"vec\":{\"array\":[\"u8\",32]}}}},{\"name\":\"tokenEntryValidation\",\"type\":{\"option\":{\"defined\":\"TokenValidation\"}}}]}},{\"name\":\"LeaveMatchArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"amount\",\"type\":\"u64\"}]}},{\"name\":\"DisburseTokensByOracleArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"tokenDeltaProofInfo\",\"type\":{\"option\":{\"defined\":\"TokenDeltaProofInfo\"}}}]}},{\"name\":\"TokenDeltaProofInfo\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"tokenDeltaProof\",\"type\":{\"vec\":{\"array\":[\"u8\",32]}}},{\"name\":\"tokenDelta\",\"type\":{\"defined\":\"TokenDelta\"}},{\"name\":\"totalProof\",\"type\":{\"vec\":{\"array\":[\"u8\",32]}}},{\"name\":\"total\",\"type\":\"u64\"}]}},{\"name\":\"Root\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"root\",\"type\":{\"array\":[\"u8\",32]}}]}},{\"name\":\"Callback\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"key\",\"type\":\"publicKey\"},{\"name\":\"code\",\"type\":\"u64\"}]}},{\"name\":\"ValidationArgs\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"instruction\",\"type\":{\"array\":[\"u8\",8]}},{\"name\":\"extraIdentifier\",\"type\":\"u64\"},{\"name\":\"tokenValidation\",\"type\":{\"defined\":\"TokenValidation\"}}]}},{\"name\":\"NamespaceAndIndex\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"namespace\",\"type\":\"publicKey\"},{\"name\":\"indexed\",\"type\":\"bool\"},{\"name\":\"inherited\",\"type\":{\"defined\":\"InheritanceState\"}}]}},{\"name\":\"TokenDelta\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"from\",\"type\":\"publicKey\"},{\"name\":\"to\",\"type\":{\"option\":\"publicKey\"}},{\"name\":\"tokenTransferType\",\"type\":{\"defined\":\"TokenTransferType\"}},{\"name\":\"mint\",\"type\":\"publicKey\"},{\"name\":\"amount\",\"type\":\"u64\"}]}},{\"name\":\"TokenValidation\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"filter\",\"type\":{\"defined\":\"Filter\"}},{\"name\":\"isBlacklist\",\"type\":\"bool\"},{\"name\":\"validation\",\"type\":{\"option\":{\"defined\":\"Callback\"}}}]}},{\"name\":\"MatchState\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"Draft\"},{\"name\":\"Initialized\"},{\"name\":\"Started\"},{\"name\":\"Finalized\"},{\"name\":\"PaidOut\"},{\"name\":\"Deactivated\"}]}},{\"name\":\"PermissivenessType\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"TokenHolder\"},{\"name\":\"ParentTokenHolder\"},{\"name\":\"UpdateAuthority\"},{\"name\":\"Anybody\"}]}},{\"name\":\"InheritanceState\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"NotInherited\"},{\"name\":\"Inherited\"},{\"name\":\"Overridden\"}]}},{\"name\":\"TokenType\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"Player\"},{\"name\":\"Item\"},{\"name\":\"Any\"}]}},{\"name\":\"TokenTransferType\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"PlayerToPlayer\"},{\"name\":\"PlayerToEntrant\"},{\"name\":\"Normal\"}]}},{\"name\":\"Filter\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"None\"},{\"name\":\"All\"},{\"name\":\"Namespace\",\"fields\":[{\"name\":\"namespace\",\"type\":\"publicKey\"}]},{\"name\":\"Parent\",\"fields\":[{\"name\":\"key\",\"type\":\"publicKey\"}]},{\"name\":\"Mint\",\"fields\":[{\"name\":\"mint\",\"type\":\"publicKey\"}]}]}},{\"name\":\"ErrorCode\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"IncorrectOwner\"},{\"name\":\"Uninitialized\"},{\"name\":\"MintMismatch\"},{\"name\":\"TokenTransferFailed\"},{\"name\":\"NumericalOverflowError\"},{\"name\":\"TokenMintToFailed\"},{\"name\":\"TokenBurnFailed\"},{\"name\":\"DerivedKeyInvalid\"},{\"name\":\"InvalidStartingMatchState\"},{\"name\":\"InvalidUpdateMatchState\"},{\"name\":\"InvalidOracleUpdate\"},{\"name\":\"CannotDrainYet\"},{\"name\":\"CannotLeaveMatch\"},{\"name\":\"ReceiverMustBeSigner\"},{\"name\":\"PublicKeyMismatch\"},{\"name\":\"AtaShouldNotHaveDelegate\"},{\"name\":\"CannotEnterMatch\"},{\"name\":\"InvalidProof\"},{\"name\":\"RootNotPresent\"},{\"name\":\"MustPassUpObject\"},{\"name\":\"NoValidValidationFound\"},{\"name\":\"Blacklisted\"},{\"name\":\"NoTokensAllowed\"},{\"name\":\"InvalidValidation\"},{\"name\":\"NoDeltasFound\"},{\"name\":\"UsePlayerEndpoint\"},{\"name\":\"FromDoesNotMatch\"},{\"name\":\"CannotDeltaMoreThanAmountPresent\"},{\"name\":\"DeltaMintDoesNotMatch\"},{\"name\":\"DestinationMismatch\"},{\"name\":\"MatchMustBeInFinalized\"},{\"name\":\"AtaDelegateMismatch\"},{\"name\":\"OracleAlreadyFinalized\"},{\"name\":\"OracleCooldownNotPassed\"},{\"name\":\"MatchMustBeDrained\"},{\"name\":\"NoParentPresent\"},{\"name\":\"ReinitializationDetected\"}]}}]}// await anchor.Program.fetchIdl(MATCHES_ID, provider);\n\n  const program = new anchor.Program(idl as anchor.Idl, MATCHES_ID, provider);\n\n \n                const anchorProgram =  new MatchesProgram({\n                    id: MATCHES_ID,\n                    // @ts-ignore\n                    program,\n                  });\n                  console.log(anchorProgram)\n                let blarg = new PublicKey(\"BCUfkAyJYpxBpjT7AhnHSbW2PnUMMhoKfDSdmd5fga1m\")\n                const config = (await (await fetch('https://www.autist.design/blargs')).json()) \n            \n                console.log(index)\n                // @ts-ignore\n                  const setup = config.tokensToJoin[index];\n                  console.log(setup)\n                  await anchorProgram.joinMatch(\n                    {\n                        // @ts-ignore\n                      amount: new anchor.BN(setup.amount),\n                      // @ts-ignore\n                      escrowBump: null,\n                      tokenEntryValidation: null,\n                      tokenEntryValidationProof: null,\n                    },\n                    {\n                        // @ts-ignore\n                      tokenMint: new PublicKey(setup.mint),\n                      sourceTokenAccount: null,\n                      tokenTransferAuthority: null,\n                      // @ts-ignore\n                      validationProgram: setup.validationProgram\n                      // @ts-ignore\n                        ? new PublicKey(setup.validationProgram)\n                        : null,\n                    },\n                    {\n                      winOracle: config.winOracle\n                        ? new PublicKey(config.winOracle)\n                        : (\n                            await getOracle(\n                              new PublicKey(config.oracleState.seed),\n            \n                              config.oracleState.authority\n                                ? new PublicKey(config.oracleState.authority)\n                                : wallet.publicKey\n                            )\n                          )[0],\n                          // @ts-ignore\n                      sourceType: setup.sourceType as TokenType,\n                      index:new anchor.BN(index),\n                    }\n                  );\n                \n            }      \n    };\n const someDecs2 = {\"AD1bo7F21Cy8sfUkYXEBLJTTXA7Z8NREwMX1pZBgLakq\":9,\"Fq1ZUCxZYWcEJdtN48zmhMkpVYCYCBSrnNU351PFZwCG\":9,\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\":6,\n\"8HGyAAB1yoM1ttS7pXjHMa3dukTFGQggnFFH3hJZgzQh\":6,\n\"8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA\":6,\n\"PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x\":6, \"openDKyuDPS6Ak1BuD3JtvkQGV3tzCxjpHUfe1mdC79\":9\n  }\n  setInterval(async function(){\n    try {\n\n      let thepotsTemp = await (await fetch(\"https://www.autist.design/totals\")).text()\n      if (thepots){\n\n      \n      if (thepotsTemp.length >= (thepots as string).length){\n      console.log(thepotsTemp)\n\n      setthepots(thepotsTemp)\n  console.log(thepots)\n  }\n    }\n   else {\n     if (thepotsTemp.length > 10){\n    console.log(thepotsTemp)\n\n    setthepots(thepotsTemp)\nconsole.log(thepots)\n     }\n  }\n}\n  catch (err){\n    console.log(err)\n    console.log(err)\n    console.log(err)\n    console.log(err)\n    console.log(err)\n  \n  }\n    try {\n      // @ts-ignore\n  var tokenAmount = await getAssociatedAccountBalance(connection2, wallet.publicKey, mintPublicKey)\n  // @ts-ignore\n  setBalance( tokenAmount.uiAmount)\n  }\n  catch (err){\n  \n  }\n    try {\n    // @ts-ignore\nvar tokenAmount = await getAssociatedAccountBalance(connection2, wallet.publicKey, mintKey)\n// @ts-ignore\nsetBalance( tokenAmount.uiAmount)\n}\ncatch (err){\n\n}\n}, 3500)     \n    useEffect(() => {\n        (async () => {\n            if (anchorWallet) {\n   \n              const ts = (await (await fetch('https://www.autist.design/endts')).json()) \n            console.log(ts)\n            setEndts(ts)\n              const config = (await (await fetch('https://www.autist.design/blargs')).json()) \n              let temp = \"To play, select a number above and it'll cost u this much for u (and ur team) to become winna: \\n\"\n            for (var token of config.tokensToJoin){\n              // @ts-ignore\n              temp+=token.mint + ': ' + token.amount / 10 ** parseInt(someDecs2[token.mint]) + '\\n'\n            }\n            temp+=\"I'm actually lazy ppl plz look up which token r which for now. :)\"\n            setToplay(temp)\n                //const balance = await props.connection.getBalance(anchorWallet!.publicKey);\n               // setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [anchorWallet, props.connection]);\n\nfunction changeIndex(e: any){\n    try {\n    setIndex(parseInt(e.target.value))\n    }\n    catch (err){\n\n    }\n}\nconst mintPublicKey = new PublicKey(\"AD1bo7F21Cy8sfUkYXEBLJTTXA7Z8NREwMX1pZBgLakq\")\nvar [shares, setShares] = useState(\"1.38\");\n\nvar connection2 = new Connection('https://solana--mainnet.datahub.figment.io/apikey/24c64e276fc5db6ff73da2f59bac40f2', \"confirmed\");\n\nasync function onChange(e: any){\n    e.preventDefault()\n    console.log(e.target.value)\n    setShares(e.target.value)\n    }\n\nasync function claim(){\n  if (wallet){    var fanoutSdk: FanoutClient;\n  // @ts-ignore\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n  fanoutSdk = new FanoutClient(\n    connection2,\n    provider.wallet\n);\n  let ixes = []\nfor (var der of Object.keys(someDecs2)){\nvar ix = await fanoutSdk.distributeTokenMemberInstructions(\n  {\n    \n    distributeForMint: true,\n    // @ts-ignore\n    fanout: fanout,\n    fanoutMint: new PublicKey(der),\n    // @ts-ignore\n    membershipMint: mintPublicKey,\n   // @ts-ignore\n    member: wallet.publicKey,\n    // @ts-ignore\n    payer: wallet.publicKey\n\n  }\n);\nfor (var bla of ix.instructions){\n  ixes.push(bla)\n}\n}\n\nvar  tx2 = await fanoutSdk.sendInstructions(\n  [...ixes],\n  // [...ix.instructions, ...ix3.instructions],\n  [],\n  // @ts-ignore\n  wallet.publicKey\n  );\n  }\n\n}\nasync function doit(){\n\nif (wallet){\n\n  var fanoutSdk: FanoutClient;\n  // @ts-ignore\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n  fanoutSdk = new FanoutClient(\n    connection2,\n    provider.wallet\n);\n\nconsole.log( (parseFloat(shares) * 10 ** 9))\nvar  ixs = await fanoutSdk.stakeTokenMemberInstructions(\n      {\n          \n          shares:  (parseFloat(shares) * 10 ** 9),\n          // @ts-ignore\n          fanout: fanout,\n          membershipMint: mintPublicKey,\n         // @ts-ignore\n          member: wallet.publicKey,\n          // @ts-ignore\n          payer: wallet.publicKey\n      }\n  );var tx = await fanoutSdk.sendInstructions(\n    ixs.instructions,\n    [],\n    // @ts-ignore\n    wallet.publicKey\n);\n\n}\n}\n\n/*\nconsole.log(321)\nconst { info: tokenBonding2 } = useTokenBondingFromMint(mintPublicKey);\nconst { price: price2, loading: l2 } = useLivePrice(tokenBonding2?.publicKey);\nif (price2){\n  if (!l2 && !isNaN(price2)){\n // console.log(price2)\n  }\n}\n*/\nasync function us(){\n\n  if (wallet){\n    var fanoutSdk: FanoutClient;\n  // @ts-ignore\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n  fanoutSdk = new FanoutClient(\n    connection2,\n    provider.wallet\n);\n  \n  await fanoutSdk.unstakeTokenMember({\n      // @ts-ignore\n    fanout: fanout,\n    // @ts-ignore\n    member: wallet.publicKey,\n    // @ts-ignore\n    payer: wallet.publicKey\n}\n);\n  }\n\n}\n    return (\n        <main>\n            <MainContainer>\n                <WalletContainer>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                </WalletContainer>\n                <br/>\n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>the thepots presently are factually inarguably verifiably thusly:</h2>\n                            <h3>{thepots}</h3>\n                            <br/>\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\n                                src=\"cool-cats.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                            \n                            <MintButtonContainer>\n                            { // @ts-ignore \n                            <Countdown\n                                date={new Date(endts)}\n                                onMount={({completed}) => completed && setIsEnded(true)}\n                                onComplete={() => {\n                                    setIsEnded(true);\n                                }}\n                                renderer={renderEndDateCounter}\n                              /> }\n                               { !wallet && \n                                        <ConnectButton>Connect Wallet</ConnectButton> }\n                               { wallet && \n                               <div>\n                                 <h3>Hey type in 0 for our collective - w o w - or 1 for our social token <br />- mmm - then after that idk this is guesswork <br /> lol <br />2 for usdc, 3 for cope, 4 for grape, 5 for prism</h3>\n                                 \n                                 <Input type=\"text\" onChange={changeIndex} placeholder={\"1\"} />\n\n                                 <h3>I am lazy and atm you need 1 of whatever token. the first cool bit is that <br /> anyone who becomes winner for they team 1. increases cost to play for they team 2. decrease cost to play for all oppsin teams <br /> ohhh, nash.. nash</h3>\n                                 <h1>6 for OPEN</h1> <h3>ayy, well, {toplay} </h3>   <h3>anyways all the other rules from all the other fair3ds remain the same: <br /> you can become winner at any time, with any of the below buttons. <br  /> if you do, the timer resets to now + 24hrs <br /> altho, now we're raindrops. <br /> so instead of 1 party winning lions share - well, we fck with the nashisms kiddos. <br /> redacted_j wen onchain referrals? <br /> dont forget to stake ur tokens tho cuz the hydras arguably the only ppl extractin value here <br /> ily </h3>       <MintButton\n\n                                                onMint={onMint}\n                                            />\n</div>\n                                        }\n                            </MintButtonContainer>\n                            <br/>\n                            {wallet && isActive && solanaExplorerLink &&\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on\n                                Solscan</SolExplorerLink>}\n                        </NFT>\n                    </DesContainer>\n                </MintContainer>\n                <div>\n<br />\nyou hodl {balance} social tok, grab moar here: <Link href={\"https://app.strataprotocol.com/swap/Fq1ZUCxZYWcEJdtN48zmhMkpVYCYCBSrnNU351PFZwCG\"} >nfa</Link>\n<br />\nmm pinatadrastick... <br /> <br /> \n\n        <CTAButton onClick={claim} >Distribute to self..</CTAButton>\n<br />\n<Input  style={{color:\"black\", fontSize: \"30px;\", backgroundColor: \"grey\"}} type=\"text\" onInput={onChange} value={shares} />\n<br /><br />\n\n\n<CTAButton  onClick={doit} >Stake</CTAButton>\n<br />\n\n<CTAButton  onClick={us} >Unstake All</CTAButton>\n<br />\n                </div>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","export const PREFIX: string = \"namespace\";\n","export const PREFIX: string = \"player\";\n","import { web3 } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from \"../constants/programIds\";\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: web3.PublicKey,\n  payer: web3.PublicKey,\n  walletAddress: web3.PublicKey,\n  splTokenMintAddress: web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import { web3 } from \"@project-serum/anchor\";\n\nexport const NAMESPACE_ID = new web3.PublicKey(\n  \"nameAxQRRBnd4kLfsVoZBBXfrByZdZTkh8mULLxLyqV\"\n);\n\nexport const ITEM_ID = new web3.PublicKey(\n  \"itemX1XWs9dK8T2Zca4vEEPfCAhRc7yvYFntPjTTVx6\"\n);\n\nexport const PLAYER_ID = new web3.PublicKey(\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\"\n);\n\nexport const MATCHES_ID = new web3.PublicKey(\n  \"mtchsiT6WoLQ62fwCoiHMCfXJzogtfru4ovY8tXKrjJ\"\n);\n\nexport const WRAPPED_SOL_MINT = new web3.PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new web3.PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n","// @ts-nocheck\nimport { web3, BN } from \"@project-serum/anchor\";\nimport { Callback } from \"./common\";\n\nexport interface AnchorMatchState {\n  draft?: boolean;\n  initialized?: boolean;\n  started?: boolean;\n  finalized?: boolean;\n  paidOut?: boolean;\n  deactivated?: boolean;\n}\n\nexport interface AnchorTokenEntryValidation {\n  filter: AnchorFilter;\n  isBlacklist: boolean;\n  validation: null | Callback;\n}\n\nexport interface AnchorFilter {\n  none?: boolean;\n  all?: boolean;\n  namespace?: { namespace: web3.PublicKey };\n  parent?: { key: web3.PublicKey };\n  mint?: { mint: web3.PublicKey };\n}\n\nexport enum MatchState {\n  Draft,\n  Initialized,\n  Started,\n  Finalized,\n  PaidOut,\n  Deactivated,\n}\n\nexport enum TokenTransferType {\n  PlayerToPlayer,\n  PlayerToEntrant,\n  Normal,\n}\n\nexport enum TokenType {\n  Player,\n  Item,\n  Any,\n}\n\nexport interface AnchorTokenTransferType {\n  playerToPlayer?: boolean;\n  playerToEntrant?: boolean;\n  normal?: boolean;\n}\nexport interface AnchorTokenDelta {\n  from: web3.PublicKey;\n  to: web3.PublicKey | null;\n  tokenTransferType: AnchorTokenTransferType;\n  mint: web3.PublicKey;\n  amount: BN;\n}\n","import { clusterApiUrl } from \"@solana/web3.js\";\n\ntype Cluster = {\n  name: string;\n  url: string;\n};\nexport const CLUSTERS: Cluster[] = [\n  {\n    name: \"mainnet-beta\",\n    url: \"https://api.metaplex.solana.com/\",\n  },\n  {\n    name: \"testnet\",\n    url: clusterApiUrl(\"testnet\"),\n  },\n  {\n    name: \"devnet\",\n    url: clusterApiUrl(\"devnet\"),\n  },\n];\nexport const DEFAULT_CLUSTER = CLUSTERS[2];\nexport function getCluster(name: string): string {\n  for (const cluster of CLUSTERS) {\n    if (cluster.name === name) {\n      return cluster.url;\n    }\n  }\n  return DEFAULT_CLUSTER.url;\n}\n","// @ts-nocheck\nimport fs from 'fs'\nimport { sendTransactionWithRetry } from '../../connection'\nimport {\n  web3,\n  Program,\n  BN,\n  \n  Provider,\n  Idl,\n} from \"@project-serum/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nimport NodeWallet from \"@project-serum/anchor/dist/cjs/nodewallet\";\nimport { MATCHES_ID, TOKEN_PROGRAM_ID } from \"../constants/programIds\";\nimport {\n  getAtaForMint,\n  getItemPDA,\n  getMatch,\n  getMatchTokenAccountEscrow,\n  getOracle,\n  getPlayerPDA,\n} from \"../utils/pda\";\nimport { ObjectWrapper } from \"./common\";\nimport log from \"loglevel\";\nimport { getCluster } from \"../utils/connection\";\nimport {\n  AnchorMatchState,\n  AnchorTokenDelta,\n  AnchorTokenEntryValidation,\n  TokenType,\n} from \"../state/matches\";\nimport { Token } from \"@solana/spl-token\";\nimport { createAssociatedTokenAccountInstruction } from \"../utils/ata\";\n\nexport function transformTokenValidations(args: {\n  tokenEntryValidation: AnchorTokenEntryValidation[] | null;\n}) {\n  if (args.tokenEntryValidation) {\n    args.tokenEntryValidation = args.tokenEntryValidation.map((r) => {\n      const newRFilter = { ...r.filter };\n      Object.keys(newRFilter).forEach((k) => {\n        Object.keys(newRFilter[k]).forEach((y) => {\n          if (typeof newRFilter[k][y] === \"string\") {\n            newRFilter[k][y] = new web3.PublicKey(newRFilter[k][y]);\n          }\n        });\n      });\n\n      r.filter = newRFilter;\n\n      if (r.validation) {\n        if (typeof r.validation.key === \"string\") {\n          r.validation.key = new web3.PublicKey(r.validation.key);\n          r.validation.code = new BN(r.validation.code);\n        }\n      }\n      return r;\n    });\n  }\n}\nexport class MatchWrapper implements ObjectWrapper<any, MatchesProgram> {\n  program: MatchesProgram;\n  key: web3.PublicKey;\n  object: any;\n  data: Buffer;\n\n  constructor(args: {\n    program: MatchesProgram;\n    key: web3.PublicKey;\n    object: any;\n    data: Buffer;\n  }) {\n    this.program = args.program;\n    this.key = args.key;\n    this.object = args.object;\n    this.data = args.data;\n  }\n}\n\nexport interface CreateMatchArgs {\n  matchState: AnchorMatchState;\n  tokenEntryValidationRoot: null;\n  tokenEntryValidation: null | AnchorTokenEntryValidation[];\n  winOracle: web3.PublicKey;\n  winOracleCooldown: BN;\n  authority: web3.PublicKey;\n  space: BN;\n  leaveAllowed: boolean;\n  joinAllowedDuringStart: boolean;\n  minimumAllowedEntryTime: BN | null;\n}\n\nexport interface UpdateMatchArgs {\n  matchState: AnchorMatchState;\n  tokenEntryValidationRoot: null;\n  tokenEntryValidation: null;\n  winOracleCooldown: BN;\n  authority: web3.PublicKey;\n  leaveAllowed: boolean;\n  joinAllowedDuringStart: boolean;\n  minimumAllowedEntryTime: BN | null;\n}\n\nexport interface JoinMatchArgs {\n  amount: BN;\n  tokenEntryValidationProof: null;\n  tokenEntryValidation: null;\n}\n\nexport interface LeaveMatchArgs {\n  amount: BN;\n}\n\nexport interface DisburseTokensByOracleArgs {\n  tokenDeltaProofInfo: null;\n}\n\nexport interface CreateMatchAdditionalArgs {\n  seed: string;\n  finalized: boolean;\n  tokenTransferRoot: null;\n  tokenTransfers: null | AnchorTokenDelta[];\n}\n\nexport interface CreateOrUpdateOracleArgs {\n  seed: string;\n  authority: web3.PublicKey;\n  space: BN;\n  finalized: boolean;\n  tokenTransferRoot: null;\n  tokenTransfers: null | AnchorTokenDelta[];\n}\n\nexport interface DrainMatchArgs {}\n\nexport interface DrainOracleArgs {\n  seed: string;\n  authority: web3.PublicKey;\n}\n\nexport interface UpdateMatchFromOracleAccounts {\n  winOracle: web3.PublicKey;\n}\n\nexport interface UpdateMatchAccounts {\n  winOracle: web3.PublicKey;\n}\n\nexport interface DrainMatchAccounts {\n  receiver: web3.PublicKey | null;\n}\n\nexport interface DrainOracleAccounts {\n  receiver: web3.PublicKey | null;\n}\n\nexport interface DisburseTokensByOracleAccounts {\n  winOracle: web3.PublicKey;\n}\n\nexport interface JoinMatchAccounts {\n  tokenMint: web3.PublicKey;\n  sourceTokenAccount: web3.PublicKey | null;\n  tokenTransferAuthority: web3.Keypair | null;\n  validationProgram: web3.PublicKey | null;\n}\n\nexport interface LeaveMatchAccounts {\n  tokenMint: web3.PublicKey;\n  receiver: web3.PublicKey;\n}\n\nexport interface JoinMatchAdditionalArgs {\n  sourceType: TokenType;\n  index: BN | null;\n  winOracle: web3.PublicKey;\n}\n\nexport interface LeaveMatchAdditionalArgs {\n  winOracle: web3.PublicKey;\n}\n\nexport interface DrainMatchAdditionalArgs {\n  winOracle: web3.PublicKey;\n}\n\nexport interface DisburseTokensByOracleAdditionalArgs {\n  tokenDelta: AnchorTokenDelta;\n}\n\nexport class MatchesInstruction {\n  id: web3.PublicKey;\n  program: Program;\n\n  constructor(args: { id: web3.PublicKey; program: Program }) {\n    this.id = args.id;\n    this.program = args.program;\n  }\n\n  async createMatch(\n    args: CreateMatchArgs,\n    _accounts = {},\n    _additionalArgs = {}\n  ) {\n    const [match, _matchBump] = await getMatch(args.winOracle);\n\n    transformTokenValidations(args);\n    return {\n      instructions: [\n        await this.program.methods\n          .createMatch(args)\n          .accounts({\n            matchInstance: match,\n            payer: (this.program.provider as Provider).wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async disburseTokensByOracle(\n    args: DisburseTokensByOracleArgs,\n    accounts: DisburseTokensByOracleAccounts,\n    additionalArgs: DisburseTokensByOracleAdditionalArgs\n  ) {\n    const match = (await getMatch(accounts.winOracle))[0];\n    const tfer = additionalArgs.tokenDelta;\n\n    const [tokenAccountEscrow, _escrowBump] = await getMatchTokenAccountEscrow(\n      accounts.winOracle,\n      tfer.mint,\n      tfer.from\n    );\n\n    let destinationTokenAccount = tfer.to;\n    const info = await (\n      this.program.provider as Provider\n    ).connection.getAccountInfo(destinationTokenAccount);\n\n    const instructions = [];\n\n    if (!info.owner.equals(TOKEN_PROGRAM_ID)) {\n      const destinationTokenOwner = destinationTokenAccount;\n      destinationTokenAccount = (\n        await getAtaForMint(tfer.mint, destinationTokenAccount)\n      )[0];\n\n      const exists = await (\n        this.program.provider as Provider\n      ).connection.getAccountInfo(destinationTokenAccount);\n\n      if (!exists || exists.data.length == 0) {\n        instructions.unshift(\n          createAssociatedTokenAccountInstruction(\n            destinationTokenAccount,\n            (this.program.provider as Provider).wallet.publicKey,\n            destinationTokenOwner,\n            tfer.mint\n          )\n        );\n      }\n    }\n\n    instructions.push(\n      await this.program.methods\n        .disburseTokensByOracle(args)\n        .accounts({\n          matchInstance: match,\n          tokenAccountEscrow,\n          tokenMint: tfer.mint,\n          originalSender: tfer.from,\n          destinationTokenAccount,\n          winOracle: accounts.winOracle,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        })\n        .instruction()\n    );\n    return {\n      instructions,\n      signers: [],\n    };\n  }\n\n  async drainMatch(\n    _args: DrainMatchArgs,\n    accounts: DrainMatchAccounts,\n    additionalArgs: DrainMatchAdditionalArgs\n  ) {\n    const match = (await getMatch(additionalArgs.winOracle))[0];\n\n    return {\n      instructions: [\n        await this.program.methods\n          .drainMatch()\n          .accounts({\n            matchInstance: match,\n            authority: (this.program.provider as Provider).wallet\n              .publicKey,\n            receiver:\n              accounts.receiver ||\n              (this.program.provider as Provider).wallet.publicKey,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async drainOracle(\n    args: DrainOracleArgs,\n    accounts: DrainOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const [oracle, oracleBump] = await getOracle(\n      new web3.PublicKey(args.seed),\n      new web3.PublicKey(args.authority)\n    );\n\n    const [match, _matchBump] = await getMatch(oracle);\n\n    return {\n      instructions: [\n        await this.program.methods\n          .drainOracle({ ...args, seed: new web3.PublicKey(args.seed) })\n          .accounts({\n            matchInstance: match,\n            authority: (this.program.provider as Provider).wallet\n              .publicKey,\n            receiver:\n              accounts.receiver ||\n              (this.program.provider as Provider).wallet.publicKey,\n            oracle,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n  async updateMatch(\n    args: UpdateMatchArgs,\n    accounts: UpdateMatchAccounts,\n    _additionalArgs = {}\n  ) {\n    const match = (await getMatch(accounts.winOracle))[0];\n    transformTokenValidations(args);\n\n    return {\n      instructions: [\n        await this.program.methods\n          .updateMatch(args)\n          .accounts({\n            matchInstance: match,\n            winOracle: accounts.winOracle,\n            authority: (this.program.provider as Provider).wallet\n              .publicKey,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async leaveMatch(\n    args: LeaveMatchArgs,\n    accounts: LeaveMatchAccounts,\n    additionalArgs: LeaveMatchAdditionalArgs\n  ) {\n    const match = (await getMatch(additionalArgs.winOracle))[0];\n\n    const destinationTokenAccount = (\n      await getAtaForMint(accounts.tokenMint, accounts.receiver)\n    )[0];\n\n    const [tokenAccountEscrow, _escrowBump] = await getMatchTokenAccountEscrow(\n      additionalArgs.winOracle,\n      accounts.tokenMint,\n      (this.program.provider as Provider).wallet.publicKey\n    );\n\n    const signers = [];\n\n    return {\n      instructions: [\n        await this.program.methods\n          .leaveMatch(args)\n          .accounts({\n            matchInstance: match,\n            tokenAccountEscrow,\n            tokenMint: accounts.tokenMint,\n            destinationTokenAccount,\n            receiver: (this.program.provider as Provider).wallet\n              .publicKey,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          })\n          .instruction(),\n      ],\n      signers,\n    };\n  }\n\n  async joinMatch(\n    args: JoinMatchArgs,\n    accounts: JoinMatchAccounts,\n    additionalArgs: JoinMatchAdditionalArgs\n  ) {\n    const match = (await getMatch(additionalArgs.winOracle))[0];\n\n    const sourceTokenAccount =\n      accounts.sourceTokenAccount ||\n      (\n        await getAtaForMint(\n          accounts.tokenMint,\n          (this.program.provider as Provider).wallet.publicKey\n        )\n      )[0];\n    const transferAuthority =\n      accounts.tokenTransferAuthority || web3.Keypair.generate();\n\n    const [tokenAccountEscrow, _escrowBump] = await getMatchTokenAccountEscrow(\n      additionalArgs.winOracle,\n      accounts.tokenMint,\n      (this.program.provider as Provider).wallet.publicKey\n    );\n\n    const signers = [transferAuthority];\n\n    return {\n      instructions: [\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          sourceTokenAccount,\n          transferAuthority.publicKey,\n          (this.program.provider as Provider).wallet.publicKey,\n          [],\n          args.amount.toNumber()\n        ),\n        await this.program.methods\n          .joinMatch(args)\n          .accounts({\n            matchInstance: match,\n            tokenTransferAuthority: transferAuthority.publicKey,\n            tokenAccountEscrow,\n            tokenMint: accounts.tokenMint,\n            sourceTokenAccount,\n            sourceItemOrPlayerPda:\n              additionalArgs.sourceType == TokenType.Any\n                ? SystemProgram.programId\n                : additionalArgs.sourceType == TokenType.Item\n                ? (\n                    await getItemPDA(accounts.tokenMint, additionalArgs.index)\n                  )[0]\n                : (\n                    await getPlayerPDA(accounts.tokenMint, additionalArgs.index)\n                  )[0],\n            payer: (this.program.provider as Provider).wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n            validationProgram:\n              accounts.validationProgram || SystemProgram.programId,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          })\n          .signers(signers)\n          .instruction(),\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          sourceTokenAccount,\n          (this.program.provider as Provider).wallet.publicKey,\n          []\n        ),\n      ],\n      signers,\n    };\n  }\n\n  async updateMatchFromOracle(\n    args = {},\n    accounts: UpdateMatchFromOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const match = (await getMatch(accounts.winOracle))[0];\n\n    return {\n      instructions: [\n        await this.program.methods\n          .updateMatchFromOracle()\n          .accounts({\n            matchInstance: match,\n            winOracle: accounts.winOracle,\n            authority: (this.program.provider as Provider).wallet\n              .publicKey,\n            clock: web3.SYSVAR_CLOCK_PUBKEY,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n\n  async createOrUpdateOracle(\n    args: CreateOrUpdateOracleArgs,\n    _accounts = {},\n    _additionalArgs = {}\n  ) {\n    const [oracle, _oracleBump] = await getOracle(\n      new web3.PublicKey(args.seed),\n      args.authority\n    );\n\n    const tokenTransfers = args.tokenTransfers\n      ? args.tokenTransfers.map((t) => ({\n          ...t,\n          from: new web3.PublicKey(t.from),\n          to: t.to ? new web3.PublicKey(t.to) : null,\n          mint: new web3.PublicKey(t.mint),\n          amount: new BN(t.amount),\n        }))\n      : null;\n\n    return {\n      instructions: [\n        await this.program.methods\n          .createOrUpdateOracle({\n            ...args,\n            tokenTransfers,\n            seed: new web3.PublicKey(args.seed),\n          })\n          .accounts({\n            oracle,\n            payer: (this.program.provider as Provider).wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n          })\n          .instruction(),\n      ],\n      signers: [],\n    };\n  }\n}\n\nexport class MatchesProgram {\n  id: web3.PublicKey;\n  program: Program;\n  instruction: MatchesInstruction;\n\n  constructor(args: { id: web3.PublicKey; program: Program }) {\n    this.id = args.id;\n    this.program = args.program;\n    this.instruction = new MatchesInstruction({\n      id: this.id,\n      program: this.program,\n    });\n  }\n\n  async fetchMatch(oracle: web3.PublicKey): Promise<MatchWrapper> {\n    const matchPda = (await getMatch(oracle))[0];\n\n    const match = await this.program.account.match.fetch(matchPda);\n\n    return new MatchWrapper({\n      program: this,\n      key: matchPda,\n      data: match.data as Buffer,\n      object: match,\n    });\n  }\n\n  async fetchOracle(oracle: web3.PublicKey): Promise<MatchWrapper> {\n    const oracleAcct = await (\n      this.program.provider as Provider\n    ).connection.getAccountInfo(oracle);\n\n    const oracleInstance =\n      await this.program.account.winOracle.coder.accounts.decode(\n        \"WinOracle\",\n        oracleAcct.data\n      );\n\n    return new MatchWrapper({\n      program: this,\n      key: oracle,\n      data: oracleAcct.data,\n      object: oracleInstance,\n    });\n  }\n\n  async createMatch(\n    args: CreateMatchArgs,\n    _accounts = {},\n    additionalArgs: CreateMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.createMatch(args);\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async disburseTokensByOracle(\n    args: DisburseTokensByOracleArgs,\n    accounts: DisburseTokensByOracleAccounts,\n    additionalArgs: DisburseTokensByOracleAdditionalArgs\n  ) {\n    const { instructions, signers } =\n      await this.instruction.disburseTokensByOracle(\n        args,\n        accounts,\n        additionalArgs\n      );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async drainMatch(\n    args: DrainMatchArgs,\n    accounts: DrainMatchAccounts,\n    additionalArgs: DrainMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.drainMatch(\n      args,\n      accounts,\n      additionalArgs\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async drainOracle(\n    args: DrainOracleArgs,\n    accounts: DrainOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } = await this.instruction.drainOracle(\n      args,\n      accounts\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async joinMatch(\n    args: JoinMatchArgs,\n    accounts: JoinMatchAccounts,\n    additionalArgs: JoinMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.joinMatch(\n      args,\n      accounts,\n      additionalArgs\n    );\n\n   \n   await sendTransactionWithRetry(\n\n    (this.program.provider as Provider).connection,\n    (this.program.provider as Provider).wallet,\n    instructions,\n    signers)\n   }\n\n  async leaveMatch(\n    args: LeaveMatchArgs,\n    accounts: LeaveMatchAccounts,\n    additionalArgs: LeaveMatchAdditionalArgs\n  ) {\n    const { instructions, signers } = await this.instruction.leaveMatch(\n      args,\n      accounts,\n      additionalArgs\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async updateMatch(\n    args: UpdateMatchArgs,\n    accounts: UpdateMatchAccounts,\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } = await this.instruction.updateMatch(\n      args,\n      accounts\n    );\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async updateMatchFromOracle(\n    args = {},\n    accounts: UpdateMatchFromOracleAccounts,\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } =\n      await this.instruction.updateMatchFromOracle(args, accounts);\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n\n  async createOrUpdateOracle(\n    args: CreateOrUpdateOracleArgs,\n    _accounts = {},\n    _additionalArgs = {}\n  ) {\n    const { instructions, signers } =\n      await this.instruction.createOrUpdateOracle(args);\n\n    await sendTransactionWithRetry(\n      (this.program.provider as Provider).connection,\n      (this.program.provider as Provider).wallet,\n      instructions,\n      signers\n    );\n  }\n}\n\nexport async function getMatchesProgram(\n  anchorWallet: NodeWallet | web3.Keypair,\n  env: string,\n  customRpcUrl: string\n): Promise<MatchesProgram> {\n  if (customRpcUrl) log.debug(\"USING CUSTOM URL\", customRpcUrl);\n\n  const solConnection = new web3.Connection(customRpcUrl || getCluster(env));\n\n  if (anchorWallet instanceof web3.Keypair)\n    anchorWallet = new NodeWallet(anchorWallet);\n\n  const provider = new Provider(solConnection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await Program.fetchIdl(MATCHES_ID, provider);\nfs.writeFileSync('matchesidl.json', JSON.stringify(idl))\n  const program = new Program(idl as Idl, MATCHES_ID, provider);\n\n  return new MatchesProgram({\n    id: MATCHES_ID,\n    program,\n  });\n}\n\nexport async function getMatchesProgram2(\n  anchorWallet: NodeWallet | web3.Keypair,\n  env: string,\n  customRpcUrl: string\n): Promise<MatchesProgram> {\n  if (customRpcUrl) log.debug(\"USING CUSTOM URL\", customRpcUrl);\n\n  const solConnection = new web3.Connection(customRpcUrl || getCluster(env));\n\n  if (anchorWallet instanceof web3.Keypair)\n    anchorWallet = new NodeWallet(anchorWallet);\n  const provider = new Provider(solConnection, anchorWallet, {\n    preflightCommitment: \"recent\",\n    \n  });\n\n  const idl = await Program.fetchIdl(MATCHES_ID, provider);\n\n  const program = new Program(idl as Idl, MATCHES_ID, provider);\n\n  return new MatchesProgram({\n    id: MATCHES_ID,\n    program,\n  });\n}","import { web3, BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  NAMESPACE_ID,\n  ITEM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  MATCHES_ID,\n  PLAYER_ID,\n} from \"../constants/programIds\";\nimport { PREFIX as ITEM_PREFIX, MARKER } from \"../constants/item\";\nimport { PREFIX as MATCHES_PREFIX } from \"../constants/matches\";\nimport { PREFIX as NAMESPACE_PREFIX } from \"../constants/namespace\";\nimport { PREFIX as PLAYER_PREFIX } from \"../constants/player\";\n\nexport const getAtaForMint = async (\n  mint: web3.PublicKey,\n  wallet: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getMatch = async (\n  oracle: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(MATCHES_PREFIX), oracle.toBuffer()],\n    MATCHES_ID\n  );\n};\n\nexport const getMatchTokenAccountEscrow = async (\n  oracle: web3.PublicKey,\n  tokenMint: web3.PublicKey,\n  tokenOwner: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(MATCHES_PREFIX),\n      oracle.toBuffer(),\n      tokenMint.toBuffer(),\n      tokenOwner.toBuffer(),\n    ],\n    MATCHES_ID\n  );\n};\n\nexport const getOracle = async (\n  seed: web3.PublicKey,\n  payer: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(MATCHES_PREFIX), payer.toBuffer(), seed.toBuffer()],\n    MATCHES_ID\n  );\n};\n\nexport const getNamespacePDA = async (\n  mint: web3.PublicKey\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(NAMESPACE_PREFIX), mint.toBuffer()],\n    NAMESPACE_ID\n  );\n};\n\nexport const getItemPDA = async (\n  mint: web3.PublicKey,\n  index: BN\n): Promise<[web3.PublicKey, number]> => {\n  console.log(index)\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(ITEM_PREFIX), mint.toBuffer(), Buffer.from(index)],//.toBuffer(\"le\", 8)],\n    ITEM_ID\n  );\n};\n\nexport const getPlayerPDA = async (\n  mint: web3.PublicKey,\n  index: BN\n): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [Buffer.from(PLAYER_PREFIX), mint.toBuffer(), index.toBuffer(\"le\", 8)],\n    PLAYER_ID\n  );\n};\n\nexport const getItemActivationMarker = async (args: {\n  itemMint: web3.PublicKey;\n  index: BN;\n  usageIndex: BN;\n  amount: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemMint.toBuffer(),\n      args.index.toBuffer(\"le\", 8),\n      args.usageIndex.toBuffer(\"le\", 8),\n      args.amount.toBuffer(\"le\", 8),\n      Buffer.from(MARKER),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getCraftItemCounter = async (args: {\n  itemClassMint: web3.PublicKey;\n  newItemMint: web3.PublicKey;\n  craftItemMint: web3.PublicKey;\n  componentScope: String;\n  craftItemIndex: BN;\n  craftEscrowIndex: BN;\n  classIndex: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemClassMint.toBuffer(),\n      args.classIndex.toBuffer(\"le\", 8),\n      args.newItemMint.toBuffer(),\n      args.craftEscrowIndex.toBuffer(\"le\", 8),\n      args.craftItemIndex.toBuffer(\"le\", 8),\n      args.craftItemMint.toBuffer(),\n      Buffer.from(args.componentScope),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getCraftItemEscrow = async (args: {\n  itemClassMint: web3.PublicKey;\n  payer: web3.PublicKey;\n  newItemMint: web3.PublicKey;\n  craftItemToken: web3.PublicKey;\n  craftItemMint: web3.PublicKey;\n  amountToMake: BN;\n  amountToContributeFromThisContributor: BN;\n  componentScope: String;\n  craftIndex: BN;\n  classIndex: BN;\n  craftEscrowIndex: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemClassMint.toBuffer(),\n      args.classIndex.toBuffer(\"le\", 8),\n      args.payer.toBuffer(),\n      args.newItemMint.toBuffer(),\n      args.craftItemToken.toBuffer(),\n      args.craftEscrowIndex.toBuffer(\"le\", 8),\n      args.craftIndex.toBuffer(\"le\", 8),\n      args.craftItemMint.toBuffer(),\n      args.amountToMake.toBuffer(\"le\", 8),\n      args.amountToContributeFromThisContributor.toBuffer(\"le\", 8),\n      Buffer.from(args.componentScope),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getItemEscrow = async (args: {\n  itemClassMint: web3.PublicKey;\n  payer: web3.PublicKey;\n  newItemMint: web3.PublicKey;\n  newItemToken: web3.PublicKey;\n  amountToMake: BN;\n  componentScope: String;\n  craftEscrowIndex: BN;\n  classIndex: BN;\n}): Promise<[web3.PublicKey, number]> => {\n  return await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(ITEM_PREFIX),\n      args.itemClassMint.toBuffer(),\n      args.classIndex.toBuffer(\"le\", 8),\n      args.payer.toBuffer(),\n      args.newItemMint.toBuffer(),\n      args.newItemToken.toBuffer(),\n      args.craftEscrowIndex.toBuffer(\"le\", 8),\n      args.amountToMake.toBuffer(\"le\", 8),\n      Buffer.from(args.componentScope),\n    ],\n    ITEM_ID\n  );\n};\n\nexport const getMetadata = async (\n  mint: web3.PublicKey\n): Promise<web3.PublicKey> => {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getEdition = async (\n  mint: web3.PublicKey\n): Promise<web3.PublicKey> => {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport { DEFAULT_TIMEOUT } from './connection';\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                connection={connection}\n                txTimeout={DEFAULT_TIMEOUT}\n                rpcHost={rpcHost}\n                network={network}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n      partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n            successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[] | Transaction,\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n        block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n          // fee payed by the wallet owner\n          wallet.publicKey,\n          ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n                                              signedTransaction,\n                                              connection,\n                                              timeout = DEFAULT_TIMEOUT,\n                                            }: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}